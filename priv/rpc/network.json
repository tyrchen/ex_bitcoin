{
  "ns": "Network",
  "items": [
    {
      "name": "addnode",
      "desc": "addnode \"node\" \"add|remove|onetry\"\n\nAttempts to add or remove a node from the addnode list.\nOr try a connection to a node once.\n\nArguments:\n1. \"node\"     (string, required) The node (see getpeerinfo for nodes)\n2. \"command\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\n\nExamples:\n> bitcoin-cli addnode \"192.168.0.6:8333\" \"onetry\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8333\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n",
      "args": [
        {
          "type": "string",
          "required": true,
          "name": "node",
          "desc": "The node (see getpeerinfo for nodes)",
          "default": null
        },
        {
          "type": "string",
          "required": true,
          "name": "command",
          "desc": "'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once",
          "default": null
        }
      ]
    },
    {
      "name": "clearbanned",
      "desc": "clearbanned\n\nClear all banned IPs.\n\nExamples:\n> bitcoin-cli clearbanned \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n",
      "args": []
    },
    {
      "name": "disconnectnode",
      "desc": "disconnectnode \"[address]\" [nodeid]\n\nImmediately disconnects from the specified peer node.\n\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\n\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\n\nArguments:\n1. \"address\"     (string, optional) The IP address/port of the node\n2. \"nodeid\"      (number, optional) The node ID (see getpeerinfo for node IDs)\n\nExamples:\n> bitcoin-cli disconnectnode \"192.168.0.6:8333\"\n> bitcoin-cli disconnectnode \"\" 1\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8333\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n",
      "args": [
        {
          "type": "string",
          "required": false,
          "name": "address",
          "desc": "The IP address/port of the node",
          "default": null
        },
        {
          "type": "number",
          "required": false,
          "name": "nodeid",
          "desc": "The node ID (see getpeerinfo for node IDs)",
          "default": null
        }
      ]
    },
    {
      "name": "getaddednodeinfo",
      "desc": "getaddednodeinfo ( \"node\" )\n\nReturns information about the given added node, or all added nodes\n(note that onetry addnodes are not listed here)\n\nArguments:\n1. \"node\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.\n\nResult:\n[\n  {\n    \"addednode\" : \"192.168.0.201\",   (string) The node IP address or name (as provided to addnode)\n    \"connected\" : true|false,          (boolean) If connected\n    \"addresses\" : [                    (list of objects) Only when connected = true\n       {\n         \"address\" : \"192.168.0.201:8333\",  (string) The bitcoin server IP and port we're connected to\n         \"connected\" : \"outbound\"           (string) connection, inbound or outbound\n       }\n     ]\n  }\n  ,...\n]\n\nExamples:\n> bitcoin-cli getaddednodeinfo \"192.168.0.201\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [\"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n",
      "args": [
        {
          "type": "string",
          "required": false,
          "name": "node",
          "desc": "If provided, return information about this specific node, otherwise all nodes are returned.",
          "default": null
        }
      ]
    },
    {
      "name": "getconnectioncount",
      "desc": "getconnectioncount\n\nReturns the number of connections to other nodes.\n\nResult:\nn          (numeric) The connection count\n\nExamples:\n> bitcoin-cli getconnectioncount \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n",
      "args": []
    },
    {
      "name": "getnettotals",
      "desc": "getnettotals\n\nReturns information about network traffic, including bytes in, bytes out,\nand current time.\n\nResult:\n{\n  \"totalbytesrecv\": n,   (numeric) Total bytes received\n  \"totalbytessent\": n,   (numeric) Total bytes sent\n  \"timemillis\": t,       (numeric) Current UNIX time in milliseconds\n  \"uploadtarget\":\n  {\n    \"timeframe\": n,                         (numeric) Length of the measuring timeframe in seconds\n    \"target\": n,                            (numeric) Target in bytes\n    \"target_reached\": true|false,           (boolean) True if target is reached\n    \"serve_historical_blocks\": true|false,  (boolean) True if serving historical blocks\n    \"bytes_left_in_cycle\": t,               (numeric) Bytes left in current time cycle\n    \"time_left_in_cycle\": t                 (numeric) Seconds left in current time cycle\n  }\n}\n\nExamples:\n> bitcoin-cli getnettotals \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n",
      "args": []
    },
    {
      "name": "getnetworkinfo",
      "desc": "getnetworkinfo\nReturns an object containing various state info regarding P2P networking.\n\nResult:\n{\n  \"version\": xxxxx,                      (numeric) the server version\n  \"subversion\": \"/Satoshi:x.x.x/\",     (string) the server subversion string\n  \"protocolversion\": xxxxx,              (numeric) the protocol version\n  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network\n  \"localrelay\": true|false,              (bool) true if transaction relay is requested from peers\n  \"timeoffset\": xxxxx,                   (numeric) the time offset\n  \"connections\": xxxxx,                  (numeric) the number of connections\n  \"networkactive\": true|false,           (bool) whether p2p networking is enabled\n  \"networks\": [                          (array) information per network\n  {\n    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)\n    \"limited\": true|false,               (boolean) is the network limited using -onlynet?\n    \"reachable\": true|false,             (boolean) is the network reachable?\n    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none\n    \"proxy_randomize_credentials\": true|false,  (string) Whether randomized credentials are used\n  }\n  ,...\n  ],\n  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for transactions in BTC/kB\n  \"incrementalfee\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in BTC/kB\n  \"localaddresses\": [                    (array) list of local addresses\n  {\n    \"address\": \"xxxx\",                 (string) network address\n    \"port\": xxx,                         (numeric) network port\n    \"score\": xxx                         (numeric) relative score\n  }\n  ,...\n  ]\n  \"warnings\": \"...\"                    (string) any network warnings\n}\n\nExamples:\n> bitcoin-cli getnetworkinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n",
      "args": []
    },
    {
      "name": "getpeerinfo",
      "desc": "getpeerinfo\n\nReturns data about each connected network node as a json array of objects.\n\nResult:\n[\n  {\n    \"id\": n,                   (numeric) Peer index\n    \"addr\":\"host:port\",      (string) The IP address and port of the peer\n    \"addrbind\":\"ip:port\",    (string) Bind address of the connection to the peer\n    \"addrlocal\":\"ip:port\",   (string) Local address as reported by the peer\n    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered\n    \"relaytxes\":true|false,    (boolean) Whether peer has asked us to relay transactions to it\n    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\n    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\n    \"bytessent\": n,            (numeric) The total bytes sent\n    \"bytesrecv\": n,            (numeric) The total bytes received\n    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\n    \"timeoffset\": ttt,         (numeric) The time offset in seconds\n    \"pingtime\": n,             (numeric) ping time (if available)\n    \"minping\": n,              (numeric) minimum observed ping time (if any at all)\n    \"pingwait\": n,             (numeric) ping wait (if non-zero)\n    \"version\": v,              (numeric) The peer version, such as 7001\n    \"subver\": \"/Satoshi:0.8.5/\",  (string) The string version\n    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)\n    \"addnode\": true|false,     (boolean) Whether connection was due to addnode and is using an addnode slot\n    \"startingheight\": n,       (numeric) The starting height (block) of the peer\n    \"banscore\": n,             (numeric) The ban score\n    \"synced_headers\": n,       (numeric) The last header we have in common with this peer\n    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer\n    \"inflight\": [\n       n,                        (numeric) The heights of blocks we're currently asking from this peer\n       ...\n    ],\n    \"whitelisted\": true|false, (boolean) Whether the peer is whitelisted\n    \"bytessent_per_msg\": {\n       \"addr\": n,              (numeric) The total bytes sent aggregated by message type\n       ...\n    },\n    \"bytesrecv_per_msg\": {\n       \"addr\": n,              (numeric) The total bytes received aggregated by message type\n       ...\n    }\n  }\n  ,...\n]\n\nExamples:\n> bitcoin-cli getpeerinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n",
      "args": []
    },
    {
      "name": "listbanned",
      "desc": "listbanned\n\nList all banned IPs/Subnets.\n\nExamples:\n> bitcoin-cli listbanned \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n",
      "args": []
    },
    {
      "name": "ping",
      "desc": "ping\n\nRequests that a ping be sent to all other nodes, to measure ping time.\nResults provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\nPing command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\n\nExamples:\n> bitcoin-cli ping \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n",
      "args": []
    },
    {
      "name": "setban",
      "desc": "setban \"subnet\" \"add|remove\" (bantime) (absolute)\n\nAttempts to add or remove an IP/Subnet from the banned list.\n\nArguments:\n1. \"subnet\"       (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\n2. \"command\"      (string, required) 'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\n3. \"bantime\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\n4. \"absolute\"     (boolean, optional) If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\n\nExamples:\n> bitcoin-cli setban \"192.168.0.6\" \"add\" 86400\n> bitcoin-cli setban \"192.168.0.0/24\" \"add\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\", 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n",
      "args": [
        {
          "type": "string",
          "required": true,
          "name": "subnet",
          "desc": "The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)",
          "default": null
        },
        {
          "type": "string",
          "required": true,
          "name": "command",
          "desc": "'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list",
          "default": null
        },
        {
          "type": "numeric",
          "required": false,
          "name": "bantime",
          "desc": "time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)",
          "default": null
        },
        {
          "type": "boolean",
          "required": false,
          "name": "absolute",
          "desc": "If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)",
          "default": null
        }
      ]
    },
    {
      "name": "setnetworkactive",
      "desc": "setnetworkactive true|false\n\nDisable/enable all p2p network activity.\n\nArguments:\n1. \"state\"        (boolean, required) true to enable networking, false to disable\n\n",
      "args": [
        {
          "type": "boolean",
          "required": true,
          "name": "state",
          "desc": "true to enable networking, false to disable",
          "default": null
        }
      ]
    }
  ],
  "desc": "Network related RPC"
}